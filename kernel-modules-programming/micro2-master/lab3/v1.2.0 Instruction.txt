Yocto Linux build instructions for Intel Quark v.1.2.0
Tested on Ubuntu Linux 12.04 LTS running in Oracle VM VirtualBox 5.0.10.
Tested on an Intel Galileo Gen 1 board.
Tested by Timothy Miskell

0. Prepare your build environment

(a) you need a 64-bit Linux machine. The following steps
are tested on 12.04. You may try them on other Linux distributions, but 
chances are you will need additional steps.

(b) You can use VirtualBox (windows/mac) to install Ubuntu 12.04 or
use an Amazon EC2 free tier instance (http://http://aws.amazon.com/ec2/)

(c)You need an internet connection to download third party sources 
   The build process may require at least 30 GB of free disk space and 4 GB of memory.


(d) You need to have a github account. You can register one at github.com
for free. Then use the following commands to set up on your Linux machine.
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

(e) run "sudo apt-get update" to make sure your package manager is up to date.


1.  Download and format the microSD Card with the SDFormatter V4.0 program.  
    Set FORMAT TYPE: to "FULL (Erase)".
    Set FORMAT SIZE ADJUSTMENT to "OFF".
    Do NOT format the SD Card with the built in Windows Formatting tool as this will likely cause a memory misalignment,
    so that the final built Linux image will not load properly.

2.  Download Board_Support_Package_Sources_for_Intel_Quark_v1.2.0.7z from the Intel website:

    https://downloadcenter.intel.com/Detail_Desc.aspx?DwnldID=23197

3.  Be sure you have 7zip installed:
    
    >sudo apt-get install p7zip-full

4.  Download BSP 1.2.0 build instructions

    Download the instruction file from 
    https://downloadmirror.intel.com/23197/eng/Quark_BSP_BuildGuide_329687_009.pdf
 
    *NOTE* that you only need to build the kernel images(Section 6.1). Ignore the steps for building "EDKII"
    and "flash image (SPI)".

5.  Install Dependencies:

    >sudo apt-get install build-essential gcc-multilib vim-common \
    patchutils git diffstat texinfo gawk chrpath file libsdl1.2-dev

6.  Extract Board_Support_Package_Sources_for_Intel_Quark_v1.2.0.7z to your home directory.

    >cd ~/Downloads
    >7z x Board_Support_Package_Sources_for_Intel_Quark_v1.2.0.7z
    >mv Board_Support_Package_Sources_for_Intel_Quark_v1.2.0 ~/

5.  Change to the Board_Support_Package_Sources_for_Intel_Quark_v1.2.0 directory.
    Extract the meta-clanton_v1.2.0.tar.gz file.

    >cd ~/Board_Support_Package_Sources_for_Intel_Quark_v1.2.0/
    >tar -xvzf meta-clanton_v1.2.0.tar.gz

6.  Change to the meta-clanton_v1.2.0 directory.
    Run the setup.sh script which downloads the required files.
    This step can take about an hour or so.
    Make certain that your computer is connected via an ethernet cable to speedup the download times.

    >cd meta-clanton_v1.2.0
    >./setup.sh

7.  Once all of the files have downloaded source the oe-init-build-env script to configure the environment variables,
    and be sure to specify the build directory.

    >source ./oe-init-build-env yocto_build

    Once you open a new terminal, you need to do this command.

8.  The yocto_build directory will automatically be created.
    The directory will automatically change to the yocto_build directory.
    Note that patching the kernel source code is not needed as the latest release runs on the Intel Galileo Gen 1 board      
    without it.

9.  The initial build process takes approximately 5 to 6 hours to complete.
    Make certain that your computer is connected via an ethernet cable to speedup the download times.
    To build the SD Card image run:

    >bitbake image-full

10. Change back to the meta-clanton_v1.2.0 directory.
    Use the editor of your choice to modify the meta-intel-iot-devkit/recipes-core/images/image-full.bb file.

    >cd ..
    >nano meta-intel-iot-devkit/recipes-core/images/image-full.bb

11. Add the following lines to the file in order to include the necessary development tools 
    if they are not already present1:

    ...
    IMAGE_FEATURES += "package-management"
    IMAGE_FEATURES += "dev-pkgs"
    ...
    IMAGE_INSTALL += "autoconf"
    IMAGE_INSTALL += "automake"
    IMAGE_INSTALL += "binutils"
    IMAGE_INSTALL += "binutils-symlinks"
    IMAGE_INSTALL += "cpp"
    IMAGE_INSTALL += "cpp-symlinks" 
    IMAGE_INSTALL += "gcc"
    IMAGE_INSTALL += "gcc-symlinks"
    IMAGE_INSTALL += "g++"
    IMAGE_INSTALL += "g++-symlinks"
    IMAGE_INSTALL += "gettext"
    IMAGE_INSTALL += "make"
    IMAGE_INSTALL += "libstdc++-dev"
    IMAGE_INSTALL += "file"
    IMAGE_INSTALL += "coreutils"
    IMAGE_INSTALL += "python-dev"
    IMAGE_INSTALL += "git"
    IMAGE_INSTALL += "i2c-tools"
    ...

12. Save the file and exit the editor.
    Change back to the yocto_build directory and rebuild the Linux Kernel.
    The build time should be significantly shorter.
    Make certain that your computer is connected via an ethernet cable to speedup the download times.

    >cd yocto_build
    >bitbake image-full

13. Change back to the meta-clanton_v1.2.0 directory.
    Customize the kernel module located in ~/micro2/lab3/hello-mod/files/hello.c as needed for the assignment.
    Copy your customized kernel module source code to the meta-intel-iot-devkit/recipes-kernel/ directory.
    
    >cd ..
    >nano ~/micro2/lab3/hello-mod/files/hello.c

    ...(Edit file as needed)...

    >cp -rv ~/micro2/lab3/hello-mod meta-intel-iot-devkit/recipes-kernel/

14. Edit meta-intel-quark/conf/machine/quark.conf to include your kernel module.

    >nano meta-intel-quark/conf/machine/quark.conf

15. Add the following line to meta-intel-quark/conf/machine/quark.conf

    ...
    MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS += "hello-mod"
    ...

16. Save the file and exit the editor.
    Change back to the yocto_build directory and rebuild the Linux Kernel.
    The build time should be significantly shorter.
    Make certain that your computer is connected via an ethernet cable to speedup the download times.

    >cd yocto_build
    >bitbake image-full

17. The final kernel image with the development tools and the custom kernel module will be
    under tmp/deploy/images/quark
    Copy the files to the formatted SD card with the using the following list of file name changes.
    For each timestamped file, make sure to use the file with LATEST timestamp in the name.  
    Note that if you are using Windows to copy the file it may change the name of boot/grub/grub.conf to
    boot/grub/grub.conf.txt.  You want boot/grub/grub.conf without the *.txt extension.

    image-full-quark-YYYYMMDDhhmmss.rootfs.ext3        	   	   -> image-full-quark.ext3
    core-image-minimal-initramfs-quark-YYYYDDhhmmss.rootfs.cpio.gz -> core-image-minimal-initramfs-quark.cpio.gz
    bzImage--X.XX-r0-quark-YYYYMMDDhhmmss.bin			   -> bzImage
    grub.efi   							   -> grub.efi
    boot/grub/grub.conf  		      			   -> boot/grub/grub.conf

18. Load the SD Card and login to the Galileo as soon as it turns on.
    If successful, you should see a blue colored menu with boot options,
    indicating that the kernel image was successfully loaded.
    Let the menu timeout and select the default boot option.
