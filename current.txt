wireshark???
IPC: https://www.youtube.com/watch?v=vU2HDf5ZhO4

-> currently programs
	-- array queue.
	-- named pipe(writer and reader) and anonymous.
	-- data_structure

-> Next
	-> find how to write exception handling in c. or how others language wirte it.

-> TCP server: echo-server.c
	-> ebook/Linux+Socket+Programming-Sean+Walton.pdf
		-> Parallel Virtual Machines (PMVs)
			-> https://web.archive.org/web/20070321103208/http://www.parawiki.org/index.php?title=Parallel_Virtual_Machine&redirect=no
		-> syncronization
		-> Timing and resource management reduce the server's burden, increasing network performance?? HOW..
		-> TCP Reno: congestion management
		-> how connection are close/shutdown
			-> http://stackoverflow.com/questions/4160347/close-vs-shutdown-socket
	-> ebook/tcp-EFSM-SDL.pdf: give in detail about finite state machine diagram for connection and termination
	   of connection.

	-> find how tcp server handle multiple connection? for example in webserver.
	-> is there limit of tcp connections?
	-> man socket 
		-> tcp conection establishment and close and sliding window
			-> linux/tcp.c
			-> http://www.tcpipguide.com/free/t_TCPConnectionEstablishmentProcessTheThreeWayHandsh-4.htm
			-> http://www.tcpipguide.com/free/t_TCPSlidingWindowAcknowledgmentSystemForDataTranspo-5.htm
			-> http://www.tcpipguide.com/free/t_TCPSlidingWindowDataTransferandAcknowledgementMech.htm
		-> keep alive connection: http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/
		-> man fcntl 
		-> man 5 protocols
		-> ip packet structure
		-> man getprotoent
			-> write program to read protocol entry
			-> how communication domain and type in socket determine the protocol number if i gives protocol number 0(zero)
		-> IRC(Internet Relay chat): https://en.wikipedia.org/wiki/Internet_Relay_Chat
		-> select vs poll vs event-driven(for example epoll)
			-> select.c
		-> /etc/services: well known port numbers
		-> inetd: the inetd network server daemon running,  not installed by default.
			-> /etc/inetd.conf

-> udp: echo_server_udp.c
	-> 

-> ping.c: Linux Socket Programming/part4/chap18 
	-> ebook: Linux+Socket+Programming-Sean+Walton

-> Data Structure Alignment
	-> ebook/data-alignment.pdf
	-> posix_memalign
	-> data alignment and data padding
	-> A memory access is said to be aligned when the datum being accessed is n bytes long and the datum address 	is n-byte aligned.

-> IPC books
	-> http://www.netbsd.org/docs/bsd/lite2/psd.html
	-> Linux+Socket+Programming-Sean+Walton.pdf
	-> book: An Advance 4.4BSD IPC tutorial 
	-> book: An Introductory 4.4BSD IPC tutorial

-> Kernel Modules
	-> kernel-modules.txt

-> Arch Linux
	-> https://wiki.archlinux.org/index.php/Special:RecentChanges
-> __attribute__, <linux/types.h>
	-> https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html
	-> https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/sparse.txt
	-> attribute.c

-> uds.c -> unix domain socket

-> link-list.c -> store encrypt bank details

Information:
	-> what is ARPA
		-> While the name originally was the acronym for the Advanced Research Projects Agency (ARPA), the funding 
		organization in the United States that developed one of the precursors of the Internet (ARPANET), it now 
		stands for Address and Routing Parameter Area.
	-> https://www.quora.com/I-study-hard-16-hours-a-day-but-still-I-cant-get-good-grades-What-should-I-do



-- C language
	-> static
	-> volatile
		-> http://www.barrgroup.com/Embedded-Systems/How-To/C-Volatile-Keyword

-- Important Information
	-> polling
	-> spinlocking
	-> busy-waiting
	-> memory barrier or membar or memory fence or fence instruction
	-> ubuntu 16.04: http://www.zdnet.com/article/ubuntu-linux-16-04-is-here/

